객체지향

jvm의 메모리 구조{
-class area(code,data영역)
-method stack
-heap

	=>clasee area : 클래스 원형 로딩 ( 운영체제에서 메모리 영역을 말하는 듯? ) 
		class코드가 class area에 올라가는 시기 : 처음 사용될 때(class loading)
		static은 class영역이고, this는 heap영역의 instance주소로 가는 것이기 때문에 static은 this 사용하지마
		`->무조건 class이름. 으로 접근

	=>method stack : thread 별로 별도 관리 / 로컬변수, 매서드 호출 순서 쌓임 ( 정형적인 stack )

	=>heap : 객체를 저장하기 위한 영역 ( 전형적인 heap -> 동적으로 할당한 모든 것들이 저장되는 장소 )

==>클래스 영역에 클래스 설계도 저장 / 객체 생성시 스택 영역에 주소저장변수 생성 / 스택 영역에 저장된 주소인 힙영역에 객체 데이터 생성


==> static은 

}

변수의 종류 {
타입에 따른 :
	Primitive Type variable 
	Reference Type variable

선언 위치에 따른 :
	지역
	전역

인스턴스 멤버 변수 ==> 객체 내부의 변수{
	선언 위치 : 클래스 {}영역에 선언
	public class Person{
		String name;
		int name;
	}

	변수의 생성 : 객체가 만들어질 때 객체 별로 생성됨
	heap에 선언
	변수의 초기화 : 타입 별 default
	접근 : 객체 생성 후(메모리에 올린 후) 객체 이름으로 접근
	}

// static = 정적
클래스 멤버 변수 {
	선언 위치 : 클래스 {}영역에 선언되며 static 키워드를 붙임
	ex)
	public class Person{
	static String scientificationName = "homo Sapiens";
	}

	=클래스 영역에 클래스 로딩 시 메모리 등록 ( 클래스 영역에 클래스 설계도 등록 )
	=>개별 객체의 생성과 무관 + 모든 객체가 공유하는 공유 변수
	=>접근 : BEST : Person.scientificName = "클래스를 통한 접근"; 
	=>        Worst : Person p = new Person();  -> p.scientificName = "객체를 통한 접근";

	=> 소멸 시점 : 프로그램 종료 시

=>이거 그러면 싱글턴 패턴에서 사용되는 건가??

}

지역변수 & 파라미터 변수{
	선언위치 : 클래스 영역의 {}이외의 모든 중괄호 안에 선언

	매개변수, 로컬변수, for문 내부 i(로컬변수)

	생성 : 변수가 있는 라인이 실행될 때
}

Variable v = new Variable();

Variable arguments ( 메서드 선언 시 몇 개의 인자가 들어올 지 예상할 수 없을 경우 ){
	ex)
	public void variableArgs(int... params){
	int sum = 0;
	for ( int i : params ){
	sum += i;
	}
	}
}

메서드 접근 {
	멤버 변수와 마찬가지로 static(메모리에 올라가있는) 또는 non static 상태를 구분해서 호출
	static member = 클래스 / 같은 클래스에서 : 바로 호출 // 다른 클래스 : 클래스_이름.멤버_이름;
	non_static member = 객체 / 같은 클래스에서 : 바로 호출 // 다른 클래스 : 객체_이름.멤버_이름;
	
가장 중요한 것은 호출하려는 멤버가 메모리에 있는가?
->메모리에 있으면 호출 가능
->메모리에 없으면 호출 불가 -> 먼저 메모리에 로딩 후 사용해야 함
}

Class 멤버와 Instance 멤버간의 참조와 호출
	- 가장 중요한 것은 메모리에 있는가?
		-메모리에 있으면 호출 가능
		-메모리에 없으면 호출 불가

static member -> 언제나 메모리에 있음

instance member -> 객체 생성 전에는 메모리에 없음
	-객체 생성 시 모든 일반 멤버들은 메모리에 생성
	-객체 즉 레퍼런스를 통해 접근
3-b
4-c
5-e
6-d
7-f
8-a

메서드 호출 스택
	-각각의 메서드 호출 시 마다 메서드 동작을 위한 메모리 상자를 하나씩 할당
		-상자 내부에 메서드를 위한 파라미터 변수 등 로컬 변수 구성
	
	-A 메서드에서 새로운 메서드 B호출 시 B 실행을 위한 메모리 상자를 쌓음
	->main - a - b

기본형 변수와 참조형 변수
	-메서드 호출 시 파라미터로 입력된 값을 복사해서 전달.
	-java는 call by value


매서드 오버로딩 (javascript에서는 지원하지 않는 기능){
 * 오버로딩 ( 매개변수의 갯수에서 차이 ) vs 오버라이딩 ( 상속관계에서 발생 )
 * 
 * 객체지향의 특징 : 다형성
 * -> 이름이 동일한데, 하는 일이 다른 것
 * 
 * 공통점 : 메소드의 이름이 같은 것
 * 
}


case 조건에 맞지 않는 것은 최대한 빼라

