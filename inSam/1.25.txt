에러와 예외 구분 필요

Error 
메모리 부족 stack overflow와 같이 발생하면 복구 불가능
프로그램 비 정상적 종료 -> 디버깅 필요

exception
예외 발생 시 해당 예외에 대한 처리 코드를 통해 정상적인 실행 상태 유지

checked exception
예외에 대한 대처 코드가 없으면 컴파일이 진행되지 않음

unchecked exception
예외에 대한 대처 코드가 없더라도 컴파일 진행

try{}
catch(ArrayIndex..){}

Exceptiom의 상속관계에 대해 이해해야함
Exception - IOException - FileNotFoundException

finally default마냥 그냥 무조건 실행 ㄱ

예외 클래스 구조
Object - Throwable  - Exception - Runtime Exception [ex) indexing out of range, File system ]
		  - Error	     
			     - 그 외의 (컴파일 시점에 발생하는 예외)

->Runtime Exception은 처리를 안해도 컴파일은 가능하지만 동작 중에 fucking error가 뜰 수 있다.

		//Unhandled exception type FileNotFoundException
		//Checked exception ( RunTimeException의 계일이 아닌 것 )
		// 반드시 예외처리를 해야만 한다.

예외에 대한 
직접처리 : 직접 try catch를 통해 그 자리에서 처리 [ Surrond with try/catch ]
간접처리 : 나를 호출한 친구한태 보내버림 throws [ add throws declaration ]

자체 제작 Exception은 개발자가 직접 Exception을 실행시켜야 함
=> throw 발생시킬예외객체
ex ) 
class 사장{
	public void start()  {
		알바 alba = new 알바();
		try {
		alba.work();
		} catch(Exception e) {
			System.out.println("사장도 정리 중..");
			
		}
	}
}

class 알바 {
	public void work() throws 물건사라지는Exception {
		try {
			throw new 물건사라지는Exception();
		} catch(물건사라지는Exception e) {
			System.out.println("알바 정리 중...");
			throw e;
		}
	}
}
public class Test04 {
	public static void main(String[] args) {
		사장 boss = new 사장();
		boss.start();
	}

Try 시작
에러발생
블럭 밖
